package org.firstinspires.ftc.teamcode.TeleOp;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.DcMotor;

@Autonomous(name = "Autonomous Without RobotClass", group = "Competition")
public class Autonomous_NoJOEY extends LinearOpMode {

    DcMotor          RFMotor;
    DcMotor          LFMotor;
    DcMotor          RBMotor;
    DcMotor          LBMotor;
    DcMotor          ArmHeight;
    DcMotor          Turret;

    CRServo          ServoRight;
    CRServo          ServoLeft;

    final double  TicksCount            = 537.7;
    final double  TicksCountTurret      = 2786.2;
    final double  GearRatio             = 1.0;     // No Gearing.
    final double  WheelDiameterIn       = 3.77953;     // For circumference(r2pi)
          double  TickstoInchesWheel    = (TicksCount * GearRatio) / (WheelDiameterIn * 3.1415);

    @Override
    public void runOpMode() throws InterruptedException {
        //INITIALIZATION + SET MODE:
        LFMotor = hardwareMap.dcMotor.get("LFMotor");
        RFMotor = hardwareMap.dcMotor.get("RFMotor");
        LBMotor = hardwareMap.dcMotor.get("LBMotor");
        RBMotor = hardwareMap.dcMotor.get("RBMotor");
        ArmHeight = hardwareMap.dcMotor.get("ArmHeight");
        Turret = hardwareMap.dcMotor.get("Turret");
        ServoRight = hardwareMap.crservo.get("ServoRight");
        ServoLeft = hardwareMap.crservo.get("ServoLeft");

        LBMotor.setDirection(DcMotor.Direction.REVERSE);
        LFMotor.setDirection(DcMotor.Direction.REVERSE);

        RBMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        RFMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        LBMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        LFMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        ArmHeight.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        Turret.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        RBMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        RFMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        LBMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        LFMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        ArmHeight.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        Turret.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        Turret.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        ArmHeight.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

        waitForStart();


        ServoLeft.setPower(0.2);
        ServoRight.setPower(-0.2);
        sleep(1000);
        ServoLeft.setPower(0);
        ServoRight.setPower(0);

        int ArmCurrent1 = ArmHeight.getCurrentPosition();
        int ArmPos1 = ArmCurrent1 + 400; //
        ArmHeight.setTargetPosition(ArmPos1);
        while (ArmHeight.getCurrentPosition() < ArmPos1) {
            ArmHeight.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            ArmHeight.setPower(0.5);
        }
        ArmHeight.setPower(0);

        FORWARD_ENCODERS_AUTONOMOUS(0.3, 5);

        LEFT_ENCODERS_AUTONOMOUS(0.3, 26);

        FORWARD_ENCODERS_AUTONOMOUS(0.35,40);


        int ArmCurrent2 = ArmHeight.getCurrentPosition();
        int ArmPos2 = ArmCurrent2 + 1900; //
        ArmHeight.setTargetPosition(ArmPos2);
        while (ArmHeight.getCurrentPosition() < ArmPos2) {
            ArmHeight.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            ArmHeight.setPower(0.5);
        }
        ArmHeight.setPower(0);

        int TurretCurrent2 = Turret.getCurrentPosition();
        int TurretWanted2 = (int) (TurretCurrent2 - TicksCountTurret/8);
        Turret.setTargetPosition(TurretWanted2);
        while (Turret.getCurrentPosition() > TurretWanted2) {
            Turret.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            Turret.setPower(0.6);
        }

        ServoLeft.setPower(0.2);
        ServoRight.setPower(-0.2);
        sleep(1000);
        ServoLeft.setPower(0);
        ServoRight.setPower(0);


/*
        LEFT_TURN_AUTONOMOUS(0.4);

        int ArmCurrent2 = ArmHeight.getCurrentPosition();
        int ArmPos2 = ArmCurrent2 + 1200; //
        ArmHeight.setTargetPosition(ArmPos2);
        while (ArmHeight.getCurrentPosition() < ArmPos2) {
            ArmHeight.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            ArmHeight.setPower(0.5);
        }
        ArmHeight.setPower(0);

        FORWARD_ENCODERS_AUTONOMOUS(0.4, 30);

        LEFT_ENCODERS_AUTONOMOUS(0.3, 20);

        int TurretCurrent1 = Turret.getCurrentPosition();
        int TurretPos1 = -2820/4; //
        Turret.setTargetPosition(TurretPos1);
        while (Turret.getCurrentPosition() < TurretPos1) {
            Turret.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            Turret.setPower(0.5);
        }
        Turret.setPower(0);

        ServoLeft.setPower(-0.2);
        ServoRight.setPower(0.2);
        sleep(1000);
        ServoLeft.setPower(0);
        ServoRight.setPower(0);

 */
/*
        ServoLeft.setPower(0.2);
        ServoRight.setPower(-0.2);
        sleep(1000);
        ServoLeft.setPower(0);
        ServoRight.setPower(0);

        RIGHT_ENCODERS_AUTONOMOUS(0.2, 10);

        int ArmCurrent1 = ArmHeight.getCurrentPosition();
        int ArmPos1 = ArmCurrent1 + 400; //
        ArmHeight.setTargetPosition(ArmPos1);
        while (ArmHeight.getCurrentPosition() < ArmPos1) {
            ArmHeight.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            ArmHeight.setPower(0.5);
        }
        ArmHeight.setPower(0);

        FORWARD_ENCODERS_AUTONOMOUS(0.6, 50);

        int ArmCurrent2 = ArmHeight.getCurrentPosition();
        int ArmPos2 = ArmCurrent2 + 1200; //
        ArmHeight.setTargetPosition(ArmPos2);
        while (ArmHeight.getCurrentPosition() < ArmPos2) {
            ArmHeight.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            ArmHeight.setPower(0.5);
        }
        ArmHeight.setPower(0);

        int TurretCurrent1 = Turret.getCurrentPosition();
        int TurretPos1 = -2820/4; //
        Turret.setTargetPosition(TurretPos1);
        while (Turret.getCurrentPosition() < TurretPos1) {
            Turret.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            Turret.setPower(0.5);
        }
        Turret.setPower(0);

        LEFT_ENCODERS_AUTONOMOUS(0.2, 24);

        FORWARD_ENCODERS_AUTONOMOUS(0.2, 10);

        ServoLeft.setPower(-0.2);
        ServoRight.setPower(0.2);
        sleep(600);
        ServoLeft.setPower(0);
        ServoRight.setPower(0);

        RIGHT_ENCODERS_AUTONOMOUS(0.5, 26);


        int TurretCurrent2 = Turret.getCurrentPosition();
        int TurretPos2 = 2820/4; //
        Turret.setTargetPosition(TurretPos2);
        while (Turret.getCurrentPosition() < TurretPos2) {
            Turret.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            Turret.setPower(0.5);
        }
        Turret.setPower(0);

 */
    }
    public void FORWARD_ENCODERS_AUTONOMOUS(double speed, double inches) {

        int ForwardDriveLFC = LFMotor.getCurrentPosition() + (int) (inches * TickstoInchesWheel);
        int ForwardDriveRFC = RFMotor.getCurrentPosition() + (int) (inches * TickstoInchesWheel);
        int ForwardDriveLBC = LBMotor.getCurrentPosition() + (int) (inches * TickstoInchesWheel);
        int ForwardDriveRBC = RBMotor.getCurrentPosition() + (int) (inches * TickstoInchesWheel);

        RFMotor.setTargetPosition(ForwardDriveRFC);
        RBMotor.setTargetPosition(ForwardDriveRBC);
        LFMotor.setTargetPosition(ForwardDriveLFC);
        LBMotor.setTargetPosition(ForwardDriveLBC);

        while (RFMotor.getCurrentPosition() < ForwardDriveRFC && LBMotor.getCurrentPosition() < ForwardDriveLBC) {
            RFMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            RBMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            LFMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            LBMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            RFMotor.setPower(Math.abs(speed));
            RBMotor.setPower(Math.abs(speed));
            LFMotor.setPower(Math.abs(speed));
            LBMotor.setPower(Math.abs(speed));
        }

        LBMotor.setPower(0);
        RFMotor.setPower(0);
        RBMotor.setPower(0);
        LFMotor.setPower(0);

        RFMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        RBMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        LFMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        LBMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    }

    public void BACKWARDS_ENCODERS_AUTONOMOUS(double speed, double inches) {

        int ForwardDriveLFC = LFMotor.getCurrentPosition() + (int) (inches * TickstoInchesWheel);
        int ForwardDriveRFC = RFMotor.getCurrentPosition() + (int) (inches * TickstoInchesWheel);
        int ForwardDriveLBC = LBMotor.getCurrentPosition() + (int) (inches * TickstoInchesWheel);
        int ForwardDriveRBC = RBMotor.getCurrentPosition() + (int) (inches * TickstoInchesWheel);
        RFMotor.setTargetPosition(-ForwardDriveRFC);
        RBMotor.setTargetPosition(-ForwardDriveRBC);
        LFMotor.setTargetPosition(-ForwardDriveLFC);
        LBMotor.setTargetPosition(-ForwardDriveLBC);

        while (RFMotor.getCurrentPosition() < ForwardDriveRFC && LBMotor.getCurrentPosition() < ForwardDriveLBC) {
            RFMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            RBMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            LFMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            LBMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            RFMotor.setPower(Math.abs(speed));
            RBMotor.setPower(Math.abs(speed));
            LFMotor.setPower(Math.abs(speed));
            LBMotor.setPower(Math.abs(speed));
        }

        LBMotor.setPower(0);
        RFMotor.setPower(0);
        RBMotor.setPower(0);
        LFMotor.setPower(0);


        RFMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        RBMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        LFMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        LBMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    }

    public void LEFT_ENCODERS_AUTONOMOUS(double speed, double inches) {

        int ForwardDriveLFC = LFMotor.getCurrentPosition() + (int) (inches * TickstoInchesWheel);
        int ForwardDriveRFC = RFMotor.getCurrentPosition() + (int) (inches * TickstoInchesWheel);
        int ForwardDriveLBC = LBMotor.getCurrentPosition() + (int) (inches * TickstoInchesWheel);
        int ForwardDriveRBC = RBMotor.getCurrentPosition() + (int) (inches * TickstoInchesWheel);
        RFMotor.setTargetPosition(ForwardDriveRFC);
        RBMotor.setTargetPosition(-ForwardDriveRBC);
        LFMotor.setTargetPosition(-ForwardDriveLFC);
        LBMotor.setTargetPosition(ForwardDriveLBC);

        while (RFMotor.getCurrentPosition() < ForwardDriveRFC && LBMotor.getCurrentPosition() < ForwardDriveLBC) {
            RFMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            RBMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            LFMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            LBMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            RFMotor.setPower(Math.abs(speed));
            RBMotor.setPower(Math.abs(speed));
            LFMotor.setPower(Math.abs(speed));
            LBMotor.setPower(Math.abs(speed));
        }
        LBMotor.setPower(0);
        RFMotor.setPower(0);
        RBMotor.setPower(0);
        LFMotor.setPower(0);

        RFMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        RBMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        LFMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        LBMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    }

    public void RIGHT_ENCODERS_AUTONOMOUS(double speed, double inches) {

        int ForwardDriveLFC = LFMotor.getCurrentPosition() + (int) (inches * TickstoInchesWheel);
        int ForwardDriveRFC = RFMotor.getCurrentPosition() + (int) (inches * TickstoInchesWheel);
        int ForwardDriveLBC = LBMotor.getCurrentPosition() + (int) (inches * TickstoInchesWheel);
        int ForwardDriveRBC = RBMotor.getCurrentPosition() + (int) (inches * TickstoInchesWheel);
        RFMotor.setTargetPosition(-ForwardDriveRFC);
        RBMotor.setTargetPosition(ForwardDriveRBC);
        LFMotor.setTargetPosition(ForwardDriveLFC);
        LBMotor.setTargetPosition(-ForwardDriveLBC);

        while (RFMotor.getCurrentPosition() < ForwardDriveRFC && LBMotor.getCurrentPosition() < ForwardDriveLBC) {
            RFMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            RBMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            LFMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            LBMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);

            RFMotor.setPower(Math.abs(speed));
            RBMotor.setPower(Math.abs(speed));
            LFMotor.setPower(Math.abs(speed));
            LBMotor.setPower(Math.abs(speed));
        }
        LBMotor.setPower(0);
        RFMotor.setPower(0);
        RBMotor.setPower(0);
        LFMotor.setPower(0);

        RFMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        RBMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        LFMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        LBMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    }

    public void RIGHT_TURN_AUTONOMOUS(double speed) {

        int ForwardDriveLFC = LFMotor.getCurrentPosition() + (int) (1.85 * TicksCount);
        int ForwardDriveRFC = RFMotor.getCurrentPosition() + (int) (1.85 * TicksCount);
        int ForwardDriveLBC = LBMotor.getCurrentPosition() + (int) (1.85 * TicksCount);
        int ForwardDriveRBC = RBMotor.getCurrentPosition() + (int) (1.85 * TicksCount);

        RFMotor.setTargetPosition(-ForwardDriveRFC);
        RBMotor.setTargetPosition(-ForwardDriveRBC);
        LFMotor.setTargetPosition(ForwardDriveLFC);
        LBMotor.setTargetPosition(ForwardDriveLBC);

        while (RFMotor.getCurrentPosition() < ForwardDriveRFC && LBMotor.getCurrentPosition() < ForwardDriveLBC) {
            RFMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            RBMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            LFMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            LBMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            RFMotor.setPower(Math.abs(speed));
            RBMotor.setPower(Math.abs(speed));
            LFMotor.setPower(Math.abs(speed));
            LBMotor.setPower(Math.abs(speed));
        }
        LBMotor.setPower(0);
        RFMotor.setPower(0);
        RBMotor.setPower(0);
        LFMotor.setPower(0);

        RFMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        RBMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        LFMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        LBMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    }

    public void LEFT_TURN_AUTONOMOUS(double speed) {

        int ForwardDriveLFC = LFMotor.getCurrentPosition() + (int) (1.85 * TicksCount);
        int ForwardDriveRFC = RFMotor.getCurrentPosition() + (int) (1.85 * TicksCount);
        int ForwardDriveLBC = LBMotor.getCurrentPosition() + (int) (1.85 * TicksCount);
        int ForwardDriveRBC = RBMotor.getCurrentPosition() + (int) (1.85 * TicksCount);

        RFMotor.setTargetPosition(ForwardDriveRFC);
        RBMotor.setTargetPosition(ForwardDriveRBC);
        LFMotor.setTargetPosition(-ForwardDriveLFC);
        LBMotor.setTargetPosition(-ForwardDriveLBC);

        while (RFMotor.getCurrentPosition() < ForwardDriveRFC && LBMotor.getCurrentPosition() < ForwardDriveLBC) {
            RFMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            RBMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            LFMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            LBMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            RFMotor.setPower(Math.abs(speed));
            RBMotor.setPower(Math.abs(speed));
            LFMotor.setPower(Math.abs(speed));
            LBMotor.setPower(Math.abs(speed));
        }
        LBMotor.setPower(0);
        RFMotor.setPower(0);
        RBMotor.setPower(0);
        LFMotor.setPower(0);

        RFMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        RBMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        LFMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        LBMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    }
}
